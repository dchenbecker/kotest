(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{161:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),u=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=u(n),b=r,d=s["".concat(i,".").concat(b)]||s[b]||m[b]||a;return n?o.a.createElement(d,l(l({ref:t},p),{},{components:n})):o.a.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(3),o=n(7),a=(n(0),n(161)),i={title:"Multiplatform",slug:"multiplatform.html"},l={unversionedId:"framework/mpp",id:"framework/mpp",isDocsHomePage:!1,title:"Multiplatform",description:"* work in progress *",source:"@site/docs/framework/mpp.md",slug:"/framework/multiplatform.html",permalink:"/docs/framework/multiplatform.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/framework/mpp.md",version:"current"},c=[{value:"Gradle Plugin",id:"gradle-plugin",children:[]},{value:"Engine Dependency",id:"engine-dependency",children:[]},{value:"Write Tests and run from gradle",id:"write-tests-and-run-from-gradle",children:[]}],p={rightToc:c};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"}," work in progress ")),Object(a.b)("p",null,"This page describes how to use Kotest with Kotlin multiplatform."),Object(a.b)("p",null,"Note: Only IR mode is supported for Javascript - Legacy is discontinued."),Object(a.b)("h3",{id:"gradle-plugin"},"Gradle Plugin"),Object(a.b)("p",null,"Add the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://plugins.gradle.org/plugin/io.kotest.multiplatform"}),"Kotest multiplatform gradle plugin")," to your build."),Object(a.b)("p",null,"For example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),'plugins {\n   kotlin("io.kotest.multiplatform").version("5.0.0.3")\n}\n')),Object(a.b)("h3",{id:"engine-dependency"},"Engine Dependency"),Object(a.b)("p",null,"Add the Kotest engine module to your build - either as a common dependency or as a platform specific dependency."),Object(a.b)("p",null,"For example, either:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),'val commonTest by getting {\n   dependencies {\n      implementation("io.kotest:kotest-framework-engine:<version>")\n   }\n}\n')),Object(a.b)("p",null,"Or"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),'val jsTest by getting {\n   dependencies {\n      implementation("io.kotest:kotest-framework-engine-js:<version>")\n   }\n}\n')),Object(a.b)("h3",{id:"write-tests-and-run-from-gradle"},"Write Tests and run from gradle"),Object(a.b)("p",null,"Tests for multiplatform can only use the ",Object(a.b)("inlineCode",{parentName:"p"},"FunSpec"),", ",Object(a.b)("inlineCode",{parentName:"p"},"ShouldSpec")," and ",Object(a.b)("inlineCode",{parentName:"p"},"StringSpec")," spec styles."),Object(a.b)("p",null,"Note: The Javascript and Native test engines are more feature limited than the JVM test engine."),Object(a.b)("p",null,"When using multiplatform you must use the ",Object(a.b)("inlineCode",{parentName:"p"},"check")," task and not the ",Object(a.b)("inlineCode",{parentName:"p"},"test")," task."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"./gradlew check")))}u.isMDXComponent=!0}}]);